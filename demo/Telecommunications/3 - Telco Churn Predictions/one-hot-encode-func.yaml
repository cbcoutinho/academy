name: One hot encode
inputs:
- {name: df_churn_ip}
outputs:
- {name: df_one_hot}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'xgboost==1.0.2' 'gcsfs'
      'tensorflow==2.2.0' 'seaborn==0.9.0' 'matplotlib==3.1.1' 'mpld3==0.5.1' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==0.22.2'
      'numpy==1.17.2' 'pandas==1.0.3' 'xgboost==1.0.2' 'gcsfs' 'tensorflow==2.2.0'
      'seaborn==0.9.0' 'matplotlib==3.1.1' 'mpld3==0.5.1' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def one_hot_encode(
          df_churn_ip, df_one_hot
      ):

          import pandas as pd
          import numpy as np

          df_churn = pd.read_csv(df_churn_ip)

          category_cols = [
              "PaymentMethod",
              "MultipleLines",
              "InternetService",
              "OnlineSecurity",
              "OnlineBackup",
              "DeviceProtection",
              "TechSupport",
              "StreamingTV",
              "StreamingMovies",
              "Contract",
          ]

          for cc in category_cols:
              dummies = pd.get_dummies(df_churn[cc], drop_first=False)
              dummies = dummies.add_prefix("{}#".format(cc))
              df_churn.drop(cc, axis=1, inplace=True)
              df_churn = df_churn.join(dummies)

          df_churn_targets = df_churn["Churn"].unique()
          df_churn["Churn"] = df_churn["Churn"].replace({"Yes": 1, "No": 0})

          df_churn.to_csv(df_one_hot, index=False)

      import argparse
      _parser = argparse.ArgumentParser(prog='One hot encode', description='')
      _parser.add_argument("--df-churn-ip", dest="df_churn_ip", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--df-one-hot", dest="df_one_hot", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = one_hot_encode(**_parsed_args)
    args:
    - --df-churn-ip
    - {inputPath: df_churn_ip}
    - --df-one-hot
    - {outputPath: df_one_hot}
