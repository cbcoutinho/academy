name: Validate data
inputs:
- {name: csv}
- {name: expectation_suite_json, type: JsonObject}
outputs:
- {name: data_doc}
- {name: validation}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'xgboost==1.0.2' 'gcsfs'
      'tensorflow==2.2.0' 'seaborn==0.9.0' 'matplotlib==3.1.1' 'mpld3==0.5.1' 'great-expectations==0.13.11'
      || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.22.2' 'numpy==1.17.2' 'pandas==1.0.3' 'xgboost==1.0.2' 'gcsfs'
      'tensorflow==2.2.0' 'seaborn==0.9.0' 'matplotlib==3.1.1' 'mpld3==0.5.1' 'great-expectations==0.13.11'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def validate_data(
                csv_path,
                expectation_suite_json,
                data_doc_path,
                validation,
      ):
          import json
          import os
          import sys
          import great_expectations as ge
          from great_expectations.render import DefaultJinjaPageView
          from great_expectations.render.renderer import ValidationResultsPageRenderer
          from tensorflow.python.lib.io import file_io

          df = ge.read_csv(csv_path, expectation_suite=expectation_suite_json)
          result = df.validate()
          document_model = ValidationResultsPageRenderer().render(result)
          os.makedirs(os.path.dirname(data_doc_path), exist_ok=True)
          with open(data_doc_path, 'w') as writer:
              writer.write(DefaultJinjaPageView().render(document_model))
          text = DefaultJinjaPageView().render(document_model)
          print(f'Saved: {data_doc_path}')

          if not result.success:
              result = 'fail'
          else:
              result = 'success'

          with open(validation, 'w') as f:
                  f.write(result)

      import json
      import argparse
      _parser = argparse.ArgumentParser(prog='Validate data', description='')
      _parser.add_argument("--csv", dest="csv_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--expectation-suite-json", dest="expectation_suite_json", type=json.loads, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--data-doc", dest="data_doc_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--validation", dest="validation", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = validate_data(**_parsed_args)
    args:
    - --csv
    - {inputPath: csv}
    - --expectation-suite-json
    - {inputValue: expectation_suite_json}
    - --data-doc
    - {outputPath: data_doc}
    - --validation
    - {outputPath: validation}
