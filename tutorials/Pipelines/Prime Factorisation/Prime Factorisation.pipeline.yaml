apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: checks-if-a-number-is-non-prime-and-outputs-the-prime-factors-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.2.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-02-25T11:41:56.435840',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Checks if a number is
      Non-Prime and Outputs the Prime Factors", "inputs": [{"default": "100", "name":
      "in_enter_number", "optional": true, "type": "Integer"}], "name": "Checks if
      a number is Non-Prime and Outputs the Prime Factors"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.2.0}
spec:
  entrypoint: checks-if-a-number-is-non-prime-and-outputs-the-prime-factors
  templates:
  - name: checks-if-a-number-is-non-prime-and-outputs-the-prime-factors
    inputs:
      parameters:
      - {name: in_enter_number}
    dag:
      tasks:
      - name: exit-handler-1
        template: exit-handler-1
        arguments:
          parameters:
          - {name: in_enter_number, value: '{{inputs.parameters.in_enter_number}}'}
  - name: condition-2
    inputs:
      parameters:
      - {name: is-prime-num}
    dag:
      tasks:
      - name: prime-print
        template: prime-print
        arguments:
          parameters:
          - {name: is-prime-num, value: '{{inputs.parameters.is-prime-num}}'}
  - name: condition-3
    inputs:
      parameters:
      - {name: is-prime-num}
    dag:
      tasks:
      - name: prime-fact
        template: prime-fact
        arguments:
          parameters:
          - {name: is-prime-num, value: '{{inputs.parameters.is-prime-num}}'}
  - name: exit-handle
    container:
      args: [--msg, Operation completed]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def exit_handle(msg):
            print(msg)

        import argparse
        _parser = argparse.ArgumentParser(prog='Exit handle', description='')
        _parser.add_argument("--msg", dest="msg", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = exit_handle(**_parsed_args)
      image: python:3.7
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--msg", {"inputValue": "msg"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho
          -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          exit_handle(msg):\n    print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Exit
          handle'', description='''')\n_parser.add_argument(\"--msg\", dest=\"msg\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = exit_handle(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "msg", "type": "String"}], "name": "Exit handle"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"msg": "Operation completed"}'}
  - name: exit-handler-1
    inputs:
      parameters:
      - {name: in_enter_number}
    dag:
      tasks:
      - name: condition-2
        template: condition-2
        when: '"{{tasks.is-prime.outputs.parameters.is-prime-result}}" == "True"'
        dependencies: [is-prime]
        arguments:
          parameters:
          - {name: is-prime-num, value: '{{tasks.is-prime.outputs.parameters.is-prime-num}}'}
      - name: condition-3
        template: condition-3
        when: '"{{tasks.is-prime.outputs.parameters.is-prime-result}}" == "False"'
        dependencies: [is-prime]
        arguments:
          parameters:
          - {name: is-prime-num, value: '{{tasks.is-prime.outputs.parameters.is-prime-num}}'}
      - name: import-number
        template: import-number
        arguments:
          parameters:
          - {name: in_enter_number, value: '{{inputs.parameters.in_enter_number}}'}
      - name: is-prime
        template: is-prime
        dependencies: [import-number]
        arguments:
          parameters:
          - {name: import-number-Output, value: '{{tasks.import-number.outputs.parameters.import-number-Output}}'}
  - name: import-number
    container:
      args: [--numb, '{{inputs.parameters.in_enter_number}}', '----output-paths',
        /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'sympy==1.5.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'sympy==1.5.1' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def import_number(numb):  # Single Output Parameters are defined as shown
            num = numb
            return num  # return the output Parameter

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Import number', description='')
        _parser.add_argument("--numb", dest="numb", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = import_number(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: in_enter_number}
    outputs:
      parameters:
      - name: import-number-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: import-number-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--numb", {"inputValue": "numb"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet --no-warn-script-location ''sympy==1.5.1'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''sympy==1.5.1''
          --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          import_number(numb):  # Single Output Parameters are defined as shown\n    num
          = numb\n    return num  # return the output Parameter\n\ndef _serialize_int(int_value:
          int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Import
          number'', description='''')\n_parser.add_argument(\"--numb\", dest=\"numb\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = import_number(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "numb", "type": "Integer"}],
          "name": "Import number", "outputs": [{"name": "Output", "type": "Integer"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"numb":
          "{{inputs.parameters.in_enter_number}}"}'}
  - name: is-prime
    container:
      args: [--numb, '{{inputs.parameters.import-number-Output}}', '----output-paths',
        /tmp/outputs/num/data, /tmp/outputs/result/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'sympy==1.5.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'sympy==1.5.1' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def is_prime(numb):
            # Multiple Output Parameters are defined using Named Tuple

            # Note that it is also necessary to import the packages in addition to listing them in the
            # func_to_container_op definition

            import sympy

            num = numb
            if sympy.isprime(num):
                str_isprime = "{} is a Prime Number".format(num)
            else:
                str_isprime = "{} is a Consonant".format(num)

            print(
                str_isprime
            )  # Printed Outputs can be viewed in the Pipeline Block's 'Logs' tab

            return (num, sympy.isprime(num))  # Return the Multiple Parameters as a Tuple

        def _serialize_bool(bool_value: bool) -> str:
            if isinstance(bool_value, str):
                return bool_value
            if not isinstance(bool_value, bool):
                raise TypeError('Value "{}" has type "{}" instead of bool.'.format(str(bool_value), str(type(bool_value))))
            return str(bool_value)

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Is prime', description='')
        _parser.add_argument("--numb", dest="numb", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = is_prime(**_parsed_args)

        _output_serializers = [
            _serialize_int,
            _serialize_bool,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: import-number-Output}
    outputs:
      parameters:
      - name: is-prime-num
        valueFrom: {path: /tmp/outputs/num/data}
      - name: is-prime-result
        valueFrom: {path: /tmp/outputs/result/data}
      artifacts:
      - {name: is-prime-num, path: /tmp/outputs/num/data}
      - {name: is-prime-result, path: /tmp/outputs/result/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--numb", {"inputValue": "numb"}, "----output-paths", {"outputPath":
          "num"}, {"outputPath": "result"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''sympy==1.5.1''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''sympy==1.5.1'' --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho
          -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          is_prime(numb):\n    # Multiple Output Parameters are defined using Named
          Tuple\n\n    # Note that it is also necessary to import the packages in
          addition to listing them in the\n    # func_to_container_op definition\n\n    import
          sympy\n\n    num = numb\n    if sympy.isprime(num):\n        str_isprime
          = \"{} is a Prime Number\".format(num)\n    else:\n        str_isprime =
          \"{} is a Consonant\".format(num)\n\n    print(\n        str_isprime\n    )  #
          Printed Outputs can be viewed in the Pipeline Block''s ''Logs'' tab\n\n    return
          (num, sympy.isprime(num))  # Return the Multiple Parameters as a Tuple\n\ndef
          _serialize_bool(bool_value: bool) -> str:\n    if isinstance(bool_value,
          str):\n        return bool_value\n    if not isinstance(bool_value, bool):\n        raise
          TypeError(''Value \"{}\" has type \"{}\" instead of bool.''.format(str(bool_value),
          str(type(bool_value))))\n    return str(bool_value)\n\ndef _serialize_int(int_value:
          int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Is
          prime'', description='''')\n_parser.add_argument(\"--numb\", dest=\"numb\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=2)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = is_prime(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_int,\n    _serialize_bool,\n\n]\n\nimport os\nfor idx,
          output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "numb", "type": "Integer"}],
          "name": "Is prime", "outputs": [{"name": "num", "type": "Integer"}, {"name":
          "result", "type": "Boolean"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"numb": "{{inputs.parameters.import-number-Output}}"}'}
  - name: prime-fact
    container:
      args: [--numb, '{{inputs.parameters.is-prime-num}}', '----output-paths', /tmp/outputs/num/data,
        /tmp/outputs/prime_factors/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'sympy==1.5.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'sympy==1.5.1' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def prime_fact(
            numb,
        ):
            import sympy

            num = numb
            l_prime = sympy.primefactors(num)
            print("Factors of {} are: ".format(num))
            for x in l_prime:
                print("{} ".format(x), end=" ")
            return (num, l_prime)

        def _serialize_json(obj) -> str:
            if isinstance(obj, str):
                return obj
            import json
            def default_serializer(obj):
                if hasattr(obj, 'to_struct'):
                    return obj.to_struct()
                else:
                    raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
            return json.dumps(obj, default=default_serializer, sort_keys=True)

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Prime fact', description='')
        _parser.add_argument("--numb", dest="numb", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = prime_fact(**_parsed_args)

        _output_serializers = [
            _serialize_int,
            _serialize_json,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: is-prime-num}
    outputs:
      artifacts:
      - {name: prime-fact-num, path: /tmp/outputs/num/data}
      - {name: prime-fact-prime_factors, path: /tmp/outputs/prime_factors/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--numb", {"inputValue": "numb"}, "----output-paths", {"outputPath":
          "num"}, {"outputPath": "prime_factors"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''sympy==1.5.1''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''sympy==1.5.1'' --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho
          -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          prime_fact(\n    numb,\n):\n    import sympy\n\n    num = numb\n    l_prime
          = sympy.primefactors(num)\n    print(\"Factors of {} are: \".format(num))\n    for
          x in l_prime:\n        print(\"{} \".format(x), end=\" \")\n    return (num,
          l_prime)\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return
          obj\n    import json\n    def default_serializer(obj):\n        if hasattr(obj,
          ''to_struct''):\n            return obj.to_struct()\n        else:\n            raise
          TypeError(\"Object of type ''%s'' is not JSON serializable and does not
          have .to_struct() method.\" % obj.__class__.__name__)\n    return json.dumps(obj,
          default=default_serializer, sort_keys=True)\n\ndef _serialize_int(int_value:
          int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Prime
          fact'', description='''')\n_parser.add_argument(\"--numb\", dest=\"numb\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=2)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = prime_fact(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_int,\n    _serialize_json,\n\n]\n\nimport os\nfor idx,
          output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "numb", "type": "Integer"}],
          "name": "Prime fact", "outputs": [{"name": "num", "type": "Integer"}, {"name":
          "prime_factors", "type": "JsonArray"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"numb": "{{inputs.parameters.is-prime-num}}"}'}
  - name: prime-print
    container:
      args: [--numb, '{{inputs.parameters.is-prime-num}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def prime_print(numb):
            s = "{} is Prime".format(numb)
            print(s)
            return s

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Prime print', description='')
        _parser.add_argument("--numb", dest="numb", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = prime_print(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: is-prime-num}
    outputs:
      artifacts:
      - {name: prime-print-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--numb", {"inputValue": "numb"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def prime_print(numb):\n    s
          = \"{} is Prime\".format(numb)\n    print(s)\n    return s\n\ndef _serialize_str(str_value:
          str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of str.''.format(str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Prime
          print'', description='''')\n_parser.add_argument(\"--numb\", dest=\"numb\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = prime_print(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "numb", "type": "Integer"}],
          "name": "Prime print", "outputs": [{"name": "Output", "type": "String"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"numb":
          "{{inputs.parameters.is-prime-num}}"}'}
  arguments:
    parameters:
    - {name: in_enter_number, value: '100'}
  serviceAccountName: pipeline-runner
  onExit: exit-handle
